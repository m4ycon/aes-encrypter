
DEBUG = False

def printd(*args, **kwargs):
  if DEBUG:
    print(*args, **kwargs)

SBOX = [
  0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
  0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
  0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
  0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
  0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
  0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
  0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
  0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
  0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

INV_SBOX = [
  0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
  0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
  0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
  0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
  0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
  0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
  0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
  0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
  0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
  0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
  0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
  0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
  0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
  0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
  0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]

MIX_MUL_ENC = [
  [2, 3, 1, 1],
  [1, 2, 3, 1],
  [1, 1, 2, 3],
  [3, 1, 1, 2]
]

MIX_MUL_DEC = [
  [0x0E, 0x0B, 0x0D, 0x09],
  [0x09, 0x0E, 0x0B, 0x0D],
  [0x0D, 0x09, 0x0E, 0x0B],
  [0x0B, 0x0D, 0x09, 0x0E]
]

RCON = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39
]

def get_hex_list_str(l: list[int]):
  return ' '.join([hex(i)[2:].zfill(2) for i in l])

def get_matrix_str(m: list[list[int]]):
  return ' '.join([get_hex_list_str(i) for i in m])

def xor_list(a: list[int], b: list[int]):
  return [i ^ j for i, j in zip(a, b)]

def key_expansion(key: str):
  nrounds, key_size = 44, 16
  if len(key) > 16:
    nrounds, key_size = 52, 24
  if len(key) > 24:
    nrounds, key_size = 60, 32
  jump = key_size // 4

  printd(f'key: {key}')
  ext_key = [ord(c) for c in key[:key_size]] + [0]*(key_size - len(key))
  klist: list[list[int]] = [ext_key[i:i+4] for i in range(0, key_size, 4)]
  eklist: list[list[int]] = []

  def rot_word(word: list[int]):
    return word[1:] + [word[0]]

  def sub_word(word: list[int]):
    return sub_bytes([word, [0]*4, [0]*4, [0]*4])[0]

  def rcon(i: int):
    return [RCON[i], 0, 0, 0]

  def ek(offset: int):
    return eklist[offset//4]

  def k(offset: int):
    return klist[offset//4]
  
  def op1(i: int):
    a = sub_word(rot_word(ek((i-1)*4)))
    b = rcon(i//4)
    c = ek((i-4)*4)
    return xor_list(xor_list(a, b), c)
  
  def op2(i: int):
    return xor_list(ek((i-1)*4), ek((i-4)*4))
  
  def op3(i: int):
    return xor_list(sub_word(ek((i-1)*4)), ek((i-4)*4))

  # first round
  for i in range(0, key_size, 4):
    eklist.append(k(i))
    printd(f'r{i//4}: {get_hex_list_str(eklist[i//4])}')


  # middle rounds
  for i in range(len(eklist), nrounds-jump, jump):
    eklist.append(op1(i))
    printd(f'--\nr{i}: {get_hex_list_str(eklist[i])}')

    for j in range(1, jump):
      eklist.append(op3(i+j) if jump == 8 and j == 4 else op2(i+j))
      printd(f'r{i+j}: {get_hex_list_str(eklist[i+j])}')

  # last round
  eklist.append(op1(i))
  printd(f'--\nr{len(eklist)-1}: {get_hex_list_str(eklist[i])}')
  for i in range(3):
    eklist.append(op2(i))
    printd(f'r{len(eklist)-1}: {get_hex_list_str(eklist[i])}')
  printd()

  return eklist

def sub_bytes(state: list[list[int]], crypt: bool = True):
  lookup = SBOX if crypt else INV_SBOX
  for r in range(0, 4):
    for c in range(0, 4):
      state[r][c] = lookup[state[r][c]]
  return state

def shift_rows(state: list[list[int]], crypt: bool = True):
  for rows in range(0, 4):
    shift_left = state[rows][rows:] + state[rows][:rows]
    shift_right = state[rows][-rows:] + state[rows][:-rows]
    state[rows] = shift_left if crypt else shift_right
  return state

def mix_columns(state: list[list[int]], crypt: bool = True):
  lookup = MIX_MUL_ENC if crypt else MIX_MUL_DEC
  res = [[0 for _ in range(4)] for _ in range(4)]
  for i in range(0, 4):
    for j in range(0, 4):
      for k in range(0, 4):
        res[j][i] ^= gf_mul(state[k][i], lookup[j][k])
  return res

def add_round_key(state: list[list[int]], key: list[list[int]]):
  key = inv_matrix(key)
  for r in range(0, 4):
    for c in range(0, 4):
      state[r][c] = state[r][c] ^ key[r][c]
  return state

def gf_mul(n1: int, n2: int):

  if (n1 == 1 or n2 == 1):
    return n1 * n2
  
  if (n1 == 0 or n2 == 0):
    return 0
  
  E = [
    0x01, 0x03, 0x05, 0x0F, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96, 0xA1, 0xF8, 0x13, 0x35,
    0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95, 0xA4, 0xF7, 0x02, 0x06, 0x0A, 0x1E, 0x22, 0x66, 0xAA,
    0xE5, 0x34, 0x5C, 0xE4, 0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB, 0xE6, 0x31,
    0x53, 0xF5, 0x04, 0x0C, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1, 0x68, 0xB8, 0xD3, 0x6E, 0xB2, 0xCD,
    0x4C, 0xD4, 0x67, 0xA9, 0xE0, 0x3B, 0x4D, 0xD7, 0x62, 0xA6, 0xF1, 0x08, 0x18, 0x28, 0x78, 0x88,
    0x83, 0x9E, 0xB9, 0xD0, 0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE, 0x49, 0xDB, 0x76, 0x9A,
    0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50, 0xF0, 0x0B, 0x1D, 0x27, 0x69, 0xBB, 0xD6, 0x61, 0xA3,
    0xFE, 0x19, 0x2B, 0x7D, 0x87, 0x92, 0xAD, 0xEC, 0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20, 0x60, 0xA0,
    0xFB, 0x16, 0x3A, 0x4E, 0xD2, 0x6D, 0xB7, 0xC2, 0x5D, 0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41,
    0xC3, 0x5E, 0xE2, 0x3D, 0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74, 0x9C, 0xBF, 0xDA, 0x75,
    0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E, 0x82, 0x9D, 0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80,
    0x9B, 0xB6, 0xC1, 0x58, 0xE8, 0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54,
    0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x07, 0x09, 0x1B, 0x2D, 0x77, 0x99, 0xB0, 0xCB, 0x46, 0xCA,
    0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86, 0x91, 0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0x0E,
    0x12, 0x36, 0x5A, 0xEE, 0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0x0D, 0x17,
    0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24, 0x6C, 0xB4, 0xC7, 0x52, 0xF6, 0x01
  ]

  # verificar qual pode ser o L[0]

  L = [
    -1, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68, 0x33, 0xEE, 0xDF, 0x03,
    0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF, 0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1,
    0x7D, 0xC2, 0x1D, 0xB5, 0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78,
    0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45, 0x35, 0x93, 0xDA, 0x8E,
    0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94, 0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38,
    0x66, 0xDD, 0xFD, 0x30, 0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10,
    0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54, 0xFA, 0x85, 0x3D, 0xBA,
    0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA, 0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57,
    0xAF, 0x58, 0xA8, 0x50, 0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8,
    0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0, 0x9C, 0xA9, 0x51, 0xA0,
    0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC, 0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7,
    0xCC, 0xBB, 0x3E, 0x5A, 0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D,
    0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD, 0x37, 0x3F, 0x5B, 0xD1,
    0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47, 0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB,
    0x44, 0x11, 0x92, 0xD9, 0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5,
    0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80, 0xC0, 0xF7, 0x70, 0x07
  ]

  return E[L[n1] + L[n2]] if L[n1] + L[n2] <= 0xFF else E[L[n1] + L[n2] - 0xFF]


def inv_matrix(m: list[list[int]]):
  inverse_matrix = [[0 for _ in range(4)] for _ in range(4)]
  for i in range(4):
    for j in range(4):
        inverse_matrix[j][i] = m[i][j]
  return inverse_matrix

def str_to_int_4x4_matrix(s: str):
  matrix = [ord(i) for i in s]
  matrix = [matrix[i:i+4] for i in range(0, len(matrix), 4)]
  return inv_matrix(matrix)

def cipher(plain_text: str, key: str, nround: int = 9):
  w = key_expansion(key)

  res = []
  for i in range(0, len(plain_text), 16):
    res.extend(cipher16(plain_text[i:i+16], w, nround))

  return ''.join(chr(valor) for valor in [y for x in res for y in x])

def cipher16(plain_text: str, w: list[list[int]], nround: int):
  kinterval = 0

  printd(f'plain_text: {plain_text}')
  state = str_to_int_4x4_matrix(plain_text)
  printd(f'state: \n{get_matrix_str(state)}')
  printd(f'key: \n{get_matrix_str(inv_matrix(w[kinterval:kinterval+4]))}')
  state = add_round_key(state, w[kinterval:kinterval+4])
  kinterval += 4
  printd(f'add_round_key: \n{get_matrix_str(state)}')
  printd(f'r0: \n{get_matrix_str(inv_matrix(state))}\n')

  for round in range(1, nround+1):
    state = sub_bytes(state)
    printd(f'sub_bytes: \n{get_matrix_str(state)}')
    state = shift_rows(state)
    printd(f'shift_rows: \n{get_matrix_str(state)}')
    state = mix_columns(state)
    printd(f'mix_columns: \n{get_matrix_str(state)}')
    state = add_round_key(state, w[kinterval:kinterval+4])
    printd(f'key: \n{get_matrix_str(inv_matrix(w[kinterval:kinterval+4]))}')
    kinterval += 4
    printd(f'add_round_key: \n{get_matrix_str(state)}')
    printd(f'r{round}: \n{get_matrix_str(inv_matrix(state))}\n')

  state = sub_bytes(state)
  printd(f'sub_bytes: \n{get_matrix_str(state)}')
  state = shift_rows(state)
  printd(f'shift_rows: \n{get_matrix_str(state)}')
  state = add_round_key(state, w[kinterval:kinterval+4])
  printd(f'key: \n{get_matrix_str(inv_matrix(w[kinterval:kinterval+4]))}')
  kinterval += 4
  printd(f'add_round_key: \n{get_matrix_str(state)}')
  printd(f'r10: \n{get_matrix_str(inv_matrix(state))}\n')

  return inv_matrix(state)


def decipher(cript: str, key: str, nround: int = 9):
  w = key_expansion(key)

  res = []
  for i in range(0, len(cript), 16):
    res.extend(decipher16(cript[i:i+16], w, nround))
  return ''.join(chr(valor) for valor in [y for x in res for y in x])

def decipher16(cript: str, w: list[list[int]], nround: int):
  kinterval = (nround+1)*4
  printd(f'cript: {cript}')
  state = str_to_int_4x4_matrix(cript)
  printd(f'state: \n{get_matrix_str(state)}')
  printd(f'key: \n{get_matrix_str(inv_matrix(w[kinterval:kinterval+4]))}')
  state = add_round_key(state, w[kinterval:kinterval+4])
  kinterval -= 4
  printd(f'add_round_key: \n{get_matrix_str(state)}')
  printd(f'r0: \n{get_matrix_str(inv_matrix(state))}\n')

  for round in range(1, 10):
    state = shift_rows(state, False)
    printd(f'shift_rows: \n{get_matrix_str(state)}')
    state = sub_bytes(state, False)
    printd(f'sub_bytes: \n{get_matrix_str(state)}')
    printd(f'key: \n{get_matrix_str(inv_matrix(w[kinterval:kinterval+4]))}')
    state = add_round_key(state, w[kinterval:kinterval+4])
    kinterval -= 4
    printd(f'add_round_key: \n{get_matrix_str(state)}')
    state = mix_columns(state, False)
    printd(f'mix_columns: \n{get_matrix_str(state)}')
    printd(f'r{round}: \n{get_matrix_str(inv_matrix(state))}\n')

  state = shift_rows(state, False)
  printd(f'shift_rows: \n{get_matrix_str(state)}')
  state = sub_bytes(state, False)
  printd(f'sub_bytes: \n{get_matrix_str(state)}')
  state = add_round_key(state, w[kinterval:kinterval+4])
  printd(f'add_round_key: \n{get_matrix_str(state)}')
  printd(f'key: \n{get_matrix_str(inv_matrix(w[kinterval:kinterval+4]))}')
  kinterval -= 4
  printd(f'r10: \n{get_matrix_str(inv_matrix(state))}\n')

  return inv_matrix(state)


def hex_str_to_char_str(s: str):
  res = [s[i:i+2] for i in range(0, len(s), 2)]
  res = [chr(i) for i in [int(i, 16) for i in res]]
  res = [res[i:i+4] for i in range(0, len(res), 4)]
  res = inv_matrix(res)
  res = [res[i][j] for i in range(0, 4) for j in range(0, 4)]
  return ''.join(res)

def main():
  # # http://lpb.canb.auug.org.au/adfa/src/AEScalc/index.html
  # key = bytes([i for i in range(16)]).decode('ascii') # key 000102030405060708090a0b0c0d0e0f
  # w = key_expansion(key)

  # plain_text = hex_str_to_char_str('00112233445566778899aabbccddeeff')
  # cipher_text = cipher(plain_text, w)
  # decipher_text = decipher(cipher_text, w)
  # print(f'plain_text: {plain_text}') # expect 00112233445566778899aabbccddeeff
  # print(f'cipher_text: {cipher_text}') # expect 69c4e0d86a7b0430d8cdb78070b4c55a
  # print(f'decipher_text: {decipher_text}') # expect 00112233445566778899aabbccddeeff
 

  # https://www.kavaliro.com/wp-content/uploads/2014/03/AES.pdf
  # key = 'Thats my Kung Fu' # 16 bytes
  # key = 'Thats my Kung Fu12345678' # 24 bytes
  key = 'Thats my Kung Fu1234567812345678' # 32 bytes
  plain_text = 'Two One Nine Two'
  nround = int(input('nround: '))
  # ciphertext = '29C3505F571420F6402299B31A02D73A'

  cipher_text = cipher(plain_text, key, nround)
  msg = decipher(cipher_text, key, nround)
  print(f'chave: {key}')
  print(f'mensagem original: {plain_text}')
  print(f'mensagem cifrada: {cipher_text}')
  print(f'mensagem decifrada: {msg}')


main()
